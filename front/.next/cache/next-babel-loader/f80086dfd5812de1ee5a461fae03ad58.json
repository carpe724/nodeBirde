{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '마크'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://www.naver.com'\n    }, {\n      src: 'https://www.daum.net'\n    }, {\n      src: 'https://github.com'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 신기해요 ~'\n    }] // db 시퀄라이즈에서 관계 데이터 합쳐지는 경우 대문자 시작 속성때문에 (User, Images, Comments, ImagesPaths)\n\n  }],\n  ImagesPaths: [],\n  postAdded: false\n};\nvar ADD_POST = 'ADD_POST';\nexport var addPost = {\n  type: ADD_POST\n};\nvar dummyPost = {\n  id: 2,\n  content: '더미데이터 입니다',\n  User: {\n    id: 1,\n    nickname: '마크'\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        // dummyPost 를 배열 앞에다가 추가해야 게시글이 위에서부터 쌓임 >> 반대도가능?\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/jaeho/Desktop/nodeBirde/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","ImagesPaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFE;AAMRC,IAAAA,OAAO,EAAE,uBAND;AAORC,IAAAA,MAAM,EAAE,CAAC;AACLC,MAAAA,GAAG,EAAE;AADA,KAAD,EAEN;AACEA,MAAAA,GAAG,EAAE;AADP,KAFM,EAIN;AACEA,MAAAA,GAAG,EAAE;AADP,KAJM,CAPA;AAcRC,IAAAA,QAAQ,EAAE,CAAC;AACPL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADC;AAIPC,MAAAA,OAAO,EAAE;AAJF,KAAD,CAdF,CAoBR;;AApBQ,GAAD,CADa;AAuBxBI,EAAAA,WAAW,EAAE,EAvBW;AAwBxBC,EAAAA,SAAS,EAAE;AAxBa,CAArB;AA2BP,IAAMC,QAAQ,GAAG,UAAjB;AACA,OAAO,IAAMC,OAAO,GAAG;AACnBC,EAAAA,IAAI,EAAEF;AADa,CAAhB;AAIP,IAAMG,SAAS,GAAG;AACdZ,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,WAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdE,EAAAA,MAAM,EAAE,EAPM;AAQdE,EAAAA,QAAQ,EAAE;AARI,CAAlB;;AAWA,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBhB,YAAyB;AAAA,MAAXiB,MAAW;;AAC9C,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKF,QAAL;AACI,6CACOK,KADP;AAEIf,QAAAA,SAAS,GAAGa,SAAH,4BAAiBE,KAAK,CAACf,SAAvB,EAFb;AAGI;AACAS,QAAAA,SAAS,EAAE;AAJf;;AAMJ;AACI,aAAOM,KAAP;AATR;AAWH,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '마크',\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            src: 'https://www.naver.com',\r\n        },{\r\n            src: 'https://www.daum.net',\r\n        },{\r\n            src: 'https://github.com',\r\n        },],\r\n        Comments: [{\r\n            User: {\r\n                nickname: 'nero'\r\n            },\r\n            content: '우와 신기해요 ~',\r\n        }],\r\n        // db 시퀄라이즈에서 관계 데이터 합쳐지는 경우 대문자 시작 속성때문에 (User, Images, Comments, ImagesPaths)\r\n    }],\r\n    ImagesPaths: [],\r\n    postAdded: false,\r\n}\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nexport const addPost = {\r\n    type: ADD_POST,\r\n}\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: '더미데이터 입니다',\r\n    User: {\r\n        id: 1,\r\n        nickname: '마크',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                // dummyPost 를 배열 앞에다가 추가해야 게시글이 위에서부터 쌓임 >> 반대도가능?\r\n                postAdded: true,\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}