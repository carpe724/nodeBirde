{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaeho\\\\Desktop\\\\nodeBirde\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Card, Button, Popover } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport PostImages from './PostImages';\n\nconst PostCard = ({\n  post\n}) => {\n  // const { me } = useSelector((state)=>state.user);\n  // const id = me && me.id; \n  // ===>\n  // const id = me?.id; \n  // ===>\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // 보호연산자\n  // Optional chaining\n  // 내가 만약 로그인을 한 상태이면서(+) ID값이 있는지 체크 \n  // me 그리고 me.id가 있을 것\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 42\n      }\n    }),\n    action: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }\n      }, id && post.User.id === id ? // 로그인한 사용자 아이디(id)와 게시글의 아이디(post.User.id)가\n      // 같으면(내가쓴글이면) 수정 삭제가 가능하고\n      __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 37\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 37\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 33\n        }\n      }, \"\\uC2E0\\uACE0\") // 내가 쓴 글이 아니면 남에글을 신고할수 있는 버튼이 보인다.\n      ),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }))] // 배열 안에 jsx는 key가 필요!\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, __jsx(Image, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), \" */}\", __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  })), __jsx(CommentForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), __jsx(Comments, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/jaeho/Desktop/nodeBirde/front/components/PostCard.js"],"names":["React","Card","Button","Popover","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","useSelector","PropTypes","PostImages","PostCard","post","id","state","user","me","marginBottom","Images","User","propTypes","shape","number","object","content","string","createdAt","Comments","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Card, Button, Popover } from 'antd';\r\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport PostImages from './PostImages';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n    // const { me } = useSelector((state)=>state.user);\r\n    // const id = me && me.id; \r\n    // ===>\r\n    // const id = me?.id; \r\n\r\n    // ===>\r\n    const id = useSelector((state)=>state.user.me?.id);\r\n\r\n    // 보호연산자\r\n    // Optional chaining\r\n    // 내가 만약 로그인을 한 상태이면서(+) ID값이 있는지 체크 \r\n    // me 그리고 me.id가 있을 것\r\n\r\n    return (\r\n        <div style={{marginBottom: 20}}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                action={[\r\n                    <RetweetOutlined key=\"retweet\" />,\r\n                    <HeartOutlined key=\"heart\" />,\r\n                    <MessageOutlined key=\"comment\" />,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id === id ? (\r\n                            // 로그인한 사용자 아이디(id)와 게시글의 아이디(post.User.id)가\r\n                            // 같으면(내가쓴글이면) 수정 삭제가 가능하고\r\n                                <>\r\n                                    <Button>수정</Button>\r\n                                    <Button type=\"danger\">삭제</Button>\r\n                                </>\r\n                            ) : <Button>신고</Button>\r\n                            // 내가 쓴 글이 아니면 남에글을 신고할수 있는 버튼이 보인다.\r\n                        }\r\n                            \r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>\r\n                ]}\r\n                // 배열 안에 jsx는 key가 필요!\r\n            >\r\n                <Image /> */}\r\n                <Content />\r\n                <Button></Button>\r\n            </Card>\r\n            <CommentForm />\r\n            <Comments />\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}