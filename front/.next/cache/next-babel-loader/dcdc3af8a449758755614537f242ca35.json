{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // 서버가 없으므로 잠시 주석\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 서버가 없으므로 잠시 주석\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      // put 마치 action dispatch\n      type: 'LOG_OUT_SUCCESS' // 서버가 없으므로 잠시 주석\n      // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/jaeho/Desktop/nodeBirde/front/sagas/user.js"],"names":["all","fork","takeLatest","put","delay","axios","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA;AACA;AAEA,UAAMN,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMD,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAVD,CAUE,OAAMK,GAAN,EAAU;AACR,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAoB;AAChB,SAAOT,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAkB;AACd,MAAI;AACA;AACA;AAEA,UAAMX,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMD,GAAG,CAAC;AACN;AACAQ,MAAAA,IAAI,EAAE,iBAFA,CAIN;AACA;;AALM,KAAD,CAAT;AAOH,GAbD,CAaE,OAAMC,GAAN,EAAU;AACR,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,UAAV,GAAsB;AAClB,QAAMd,UAAU,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB;AACH;;AAED,UAAUQ,WAAV,GAAuB;AACnB,QAAMf,UAAU,CAAC,iBAAD,EAAoBa,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACe,UAAD,CADE,EAENf,IAAI,CAACgB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action){\r\n    try {\r\n        // 서버가 없으므로 잠시 주석\r\n        // const result = yield call(logInAPI, action.data);\r\n        \r\n        yield delay(1000);\r\n\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data,\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut(){\r\n    try {\r\n        // 서버가 없으므로 잠시 주석\r\n        // const result = yield call(logOutAPI);\r\n\r\n        yield delay(1000);\r\n\r\n        yield put({\r\n            // put 마치 action dispatch\r\n            type: 'LOG_OUT_SUCCESS',\r\n\r\n            // 서버가 없으므로 잠시 주석\r\n            // data: result.data,\r\n        })\r\n    } catch(err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}