{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = {\n  type: 'LOG_OUT'\n}; // ------------- action\n// const changeNickname = {\n//     type: 'CHANGE_NICKNAME',\n//     data: 'codeMark'\n// }\n// ------------- action creator\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n};\n\nchangeNickname('codeMark');\nstore.dispatch(changeNickname('codeMark')); // (이전상태, 액션) => 다음상태 [함수]\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    // case 'CHANGE_NICKNAME':\n    //     return{\n    //         ...state,\n    //         name: action.data,\n    //     }\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/jaeho/Desktop/nodeBirde/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","changeNickname","store","dispatch","rootReducer","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG;AACxBD,EAAAA,IAAI,EAAE;AADkB,CAArB,C,CAIP;AAEA;AACA;AACA;AACA;AAEA;;AACA,MAAME,cAAc,GAAIH,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAE,iBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAMAG,cAAc,CAAC,UAAD,CAAd;AAEAC,KAAK,CAACC,QAAN,CAAeF,cAAc,CAAC,UAAD,CAA7B,E,CAEA;;AACA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGf,YAAT,EAAuBgB,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACP,IAAf;AACI;AACA;AACA;AACA;AACA;AACA,SAAKV,OAAL;AACI,6CAAWgB,KAAX,GAAqBC,MAAM,CAACC,OAA5B;;AACJ,SAAK,QAAL;AACI,6CACOF,KADP;AAEId,QAAAA,IAAI,kCACGc,KAAK,CAACd,IADT;AAEAC,UAAAA,UAAU,EAAG,IAFb;AAGAD,UAAAA,IAAI,EAAEe,MAAM,CAACR;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOO,KADP;AAEId,QAAAA,IAAI,kCACGc,KAAK,CAACd,IADT;AAEAC,UAAAA,UAAU,EAAG,KAFb;AAGAD,UAAAA,IAAI,EAAE;AAHN;AAFR;AAlBR;AA2BH,CA5BD;;AA8BA,eAAea,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\nconst initialState = {\r\n    user: {\r\n        isLoggedIn: false,\r\n        user: null,\r\n        signUpData: {},\r\n        loginData: {},\r\n    },\r\n    post: {\r\n        mainPosts: [],\r\n    }\r\n};\r\n\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type: 'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logoutAction = {\r\n    type: 'LOG_OUT',\r\n}\r\n\r\n// ------------- action\r\n\r\n// const changeNickname = {\r\n//     type: 'CHANGE_NICKNAME',\r\n//     data: 'codeMark'\r\n// }\r\n\r\n// ------------- action creator\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type: 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n};\r\nchangeNickname('codeMark');\r\n\r\nstore.dispatch(changeNickname('codeMark'));\r\n\r\n// (이전상태, 액션) => 다음상태 [함수]\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        // case 'CHANGE_NICKNAME':\r\n        //     return{\r\n        //         ...state,\r\n        //         name: action.data,\r\n        //     }\r\n        case HYDRATE:\r\n            return {...state, ...action.payload}\r\n        case 'LOG_IN':\r\n            return{\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    isLoggedIn : true,\r\n                    user: action.data,\r\n                }\r\n            }\r\n        case 'LOG_OUT':\r\n            return{\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    isLoggedIn : false,\r\n                    user: null,\r\n                }\r\n            }            \r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}