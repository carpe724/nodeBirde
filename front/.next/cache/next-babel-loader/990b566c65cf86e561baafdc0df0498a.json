{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; // const initialState = {\n//     user: {\n//         isLoggedIn: false,\n//         user: null,\n//         signUpData: {},\n//         loginData: {},\n//     },\n//     post: {\n//         mainPosts: [],\n//     }\n// };\n// export const loginAction = (data) => {\n//     return {\n//         type: 'LOG_IN',\n//         data,\n//     }\n// }\n// export const logoutAction = (data) => {\n//     return {\n//         type: 'LOG_OUT',\n//     }\n// }\n// ------------- action\n// const changeNickname = {\n//     type: 'CHANGE_NICKNAME',\n//     data: 'codeMark'\n// }\n// ------------- action creator\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n// changeNickname('codeMark');\n// store.dispatch(changeNickname('codeMark'));\n// (이전상태, 액션) => 다음상태 [함수]\n// const rootReducer = (state = initialState, action) => {\n//     switch (action.type) {\n// case 'CHANGE_NICKNAME':\n//     return{\n//         ...state,\n//         name: action.data,\n//     }\n// case HYDRATE:\n//     return {...state, ...action.payload};\n// case 'LOG_IN':\n//     return{\n//         ...state,\n//         user: {\n//             ...state.user,\n//             isLoggedIn : true,\n//             user: action.data,\n//         },\n//     };\n// case 'LOG_OUT':\n//     return{\n//         ...state,\n//         user: {\n//             ...state.user,\n//             isLoggedIn : false,\n//             user: null,\n//         },\n//     };\n//         default:\n//             return state;\n//     }\n// };\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return _objectSpread({}, state);\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/jaeho/Desktop/nodeBirde/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKR,OAAL;AACI,+CAAWM,KAAX,GAAqBC,MAAM,CAACE,OAA5B;;AACJ;AACI,iCACOH,KADP;AAJR;AAQH,GAV+B;AAYhCJ,EAAAA,IAZgC;AAahCC,EAAAA;AAbgC,CAAD,CAAnC;AAgBA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n// const initialState = {\r\n//     user: {\r\n//         isLoggedIn: false,\r\n//         user: null,\r\n//         signUpData: {},\r\n//         loginData: {},\r\n//     },\r\n//     post: {\r\n//         mainPosts: [],\r\n//     }\r\n// };\r\n\r\n// export const loginAction = (data) => {\r\n//     return {\r\n//         type: 'LOG_IN',\r\n//         data,\r\n//     }\r\n// }\r\n\r\n// export const logoutAction = (data) => {\r\n//     return {\r\n//         type: 'LOG_OUT',\r\n//     }\r\n// }\r\n\r\n// ------------- action\r\n\r\n// const changeNickname = {\r\n//     type: 'CHANGE_NICKNAME',\r\n//     data: 'codeMark'\r\n// }\r\n\r\n// ------------- action creator\r\n// const changeNickname = (data) => {\r\n//     return {\r\n//         type: 'CHANGE_NICKNAME',\r\n//         data,\r\n//     }\r\n// };\r\n// changeNickname('codeMark');\r\n\r\n// store.dispatch(changeNickname('codeMark'));\r\n\r\n// (이전상태, 액션) => 다음상태 [함수]\r\n// const rootReducer = (state = initialState, action) => {\r\n//     switch (action.type) {\r\n        // case 'CHANGE_NICKNAME':\r\n        //     return{\r\n        //         ...state,\r\n        //         name: action.data,\r\n        //     }\r\n\r\n\r\n        // case HYDRATE:\r\n        //     return {...state, ...action.payload};\r\n\r\n\r\n        // case 'LOG_IN':\r\n        //     return{\r\n        //         ...state,\r\n        //         user: {\r\n        //             ...state.user,\r\n        //             isLoggedIn : true,\r\n        //             user: action.data,\r\n        //         },\r\n        //     };\r\n        // case 'LOG_OUT':\r\n        //     return{\r\n        //         ...state,\r\n        //         user: {\r\n        //             ...state.user,\r\n        //             isLoggedIn : false,\r\n        //             user: null,\r\n        //         },\r\n        //     };\r\n\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\nconst rootReducer = combineReducers({\r\n    index: (state = {}, action) => {\r\n        switch (action.type){\r\n            case HYDRATE:\r\n                return {...state, ...action.payload};\r\n            default:\r\n                return {\r\n                    ...state,\r\n                }\r\n        }\r\n    },\r\n\r\n    user,\r\n    post,\r\n})\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}