{"ast":null,"code":"import { createWrapper, STOREKEY } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers'; // redux-saga 붙이기\n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst configureStore = () => {\n  // redux-saga 붙이기\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) // 배포용은 중앙 데이터 히스토리를 숨기고 메모리를 아끼기위해 devtool off\n  : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer); // redux-saga 붙이기\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true // redux 에러를 표시해주어 개발시 용의한 옵션\n\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/jaeho/Desktop/nodeBirde/front/store/configureStore.js"],"names":["createWrapper","STOREKEY","createStore","compose","applyMiddleware","composeWithDevTools","reducer","createSagaMiddleware","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,oBAAxC;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB,C,CAEA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAGA,MAAMC,cAAc,GAAG,MAAM;AACzB;AACA,QAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,QAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;AAEA,QAAME,QAAQ,GAAG,QACfT,OAAO,CAACC,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CADQ,CAC0B;AAD1B,IAEfN,mBAAmB,CAACD,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAFrB;AAGA,QAAME,KAAK,GAAGX,WAAW,CAACI,OAAD,EAAUM,QAAV,CAAzB,CARyB,CAUzB;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AAEA,SAAOK,KAAP;AACH,CAdD;;AAgBA,MAAMG,OAAO,GAAGhB,aAAa,CAACS,cAAD,EAAiB;AAC1CQ,EAAAA,KAAK,MADqC,CAE1C;;AAF0C,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper, STOREKEY } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducer from '../reducers';\r\n\r\n// redux-saga 붙이기\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\n\r\nconst configureStore = () => {\r\n    // redux-saga 붙이기\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware];\r\n\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares)) // 배포용은 중앙 데이터 히스토리를 숨기고 메모리를 아끼기위해 devtool off\r\n    : composeWithDevTools(applyMiddleware(...middlewares))\r\n    const store = createStore(reducer, enhancer);\r\n\r\n    // redux-saga 붙이기\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\n    return store;\r\n}\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development',\r\n    // redux 에러를 표시해주어 개발시 용의한 옵션\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}